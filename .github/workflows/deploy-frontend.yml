name: Deploy Frontend to Self-hosted

on:
  push:
    branches: [ fix/fr/make_available_cicd ]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:  # 수동 배포 버튼 활성화
    inputs:
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string
      port:
        description: 'Port to expose (default: 3133)'
        required: false
        default: '3133'
        type: string

env:
  ECR_REGISTRY: public.ecr.aws/x2l9m6x8/selfscape/moimjang
  CONTAINER_NAME: moimjang-frontend-container
  IMAGE_NAME: moimjang-frontend

jobs:
  deploy:
    runs-on: [self-hosted, home]
    environment: 'production'
    
    steps:
    - name: Set deployment parameters
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          echo "DEPLOY_PORT=${{ github.event.inputs.port }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "DEPLOY_PORT=3133" >> $GITHUB_ENV
        fi
        echo "Using image tag: ${{ env.IMAGE_TAG || 'latest' }}"
        echo "Using port: ${{ env.DEPLOY_PORT || '3133' }}"
        
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
        
    # - name: Login to Amazon ECR Public
    #   id: login-ecr-public
    #   uses: aws-actions/amazon-ecr-login@v2
    #   with:
    #     registry-type: public
        
    - name: Pull image from ECR
      run: |
        IMAGE_TAG=${{ env.IMAGE_TAG || 'latest' }}
        echo "Pulling image from ECR with tag: $IMAGE_TAG"
        docker pull ${{ env.ECR_REGISTRY }}:$IMAGE_TAG
        
    - name: Stop and remove existing container
      run: |
        echo "Stopping and removing existing container..."
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true
        docker image prune -f || true
        
    - name: Run new container
      run: |
        IMAGE_TAG=${{ env.IMAGE_TAG || 'latest' }}
        DEPLOY_PORT=${{ env.DEPLOY_PORT || '3133' }}
        echo "Starting new container with image: ${{ env.ECR_REGISTRY }}:$IMAGE_TAG"
        echo "Exposing on port: $DEPLOY_PORT"
        
        docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          -p $DEPLOY_PORT:80 \
          ${{ env.ECR_REGISTRY }}:$IMAGE_TAG
          
        echo "Container started successfully!"
        
    - name: Verify deployment
      run: |
        DEPLOY_PORT=${{ env.DEPLOY_PORT || '3133' }}
        echo "Verifying container status..."
        docker ps | grep ${{ env.CONTAINER_NAME }}
        
        echo "Checking container logs..."
        docker logs ${{ env.CONTAINER_NAME }} --tail 20
        
        echo "Waiting for container to be ready..."
        sleep 10
        
        echo "Testing HTTP response on port $DEPLOY_PORT..."
        curl -f -s http://localhost:$DEPLOY_PORT > /dev/null && echo "✅ HTTP test successful!" || echo "⚠️ HTTP test failed, but container might still be starting..."
        

"""Add Image Object

Revision ID: 5963da3b0d66
Revises: 96f8d3e1a2cf
Create Date: 2025-04-10 10:32:27.233929

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5963da3b0d66'
down_revision: Union[str, None] = '96f8d3e1a2cf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('images',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('bucket', sa.String(), nullable=False),
        sa.Column('path', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_images_id'), 'images', ['id'], unique=False)

    # --- brands 테이블 변경 작업 ---
    op.add_column('brands', sa.Column('thumbnail_image_id', sa.Integer(), nullable=True))
    op.create_foreign_key("fk_brands_thumbnail_image_id", 'brands', 'images', ['thumbnail_image_id'], ['id'])

    connection = op.get_bind()
    # --- brands 테이블 데이터 이전 ---
    brands = connection.execute(
        sa.text('SELECT id, "thumbnailImagePath" FROM brands WHERE "thumbnailImagePath" IS NOT NULL')
    ).fetchall()
    for brand in brands:
        brand_id = brand[0]
        thumbnail_path = brand[1]
        # images 테이블에 삽입 (버켓은 'matchlog'로 지정)
        res = connection.execute(
            sa.text("""
                INSERT INTO images (bucket, path)
                VALUES (:bucket, :path)
                RETURNING id
            """),
            {'bucket': 'matchlog', 'path': thumbnail_path}
        )
        image_id = res.fetchone()[0]  # type: ignore
        # brands 테이블 FK 업데이트
        connection.execute(
            sa.text("""
                UPDATE brands
                SET thumbnail_image_id = :image_id
                WHERE id = :brand_id
            """),
            {'image_id': image_id, 'brand_id': brand_id}
        )
    op.drop_column('brands', 'thumbnailImagePath')

    # --- question_card_categories 테이블 변경 작업 ---
    op.add_column('question_card_categories', sa.Column('cover_image_id', sa.Integer(), nullable=True))
    op.create_foreign_key("fk_question_card_categories_cover_image_id", 'question_card_categories', 'images', ['cover_image_id'], ['id'])

    # --- question_card_categories 테이블 데이터 이전 ---
    categories = connection.execute(
        sa.text('SELECT id, "coverImagePath" FROM question_card_categories WHERE "coverImagePath" IS NOT NULL')
    ).fetchall()
    for category in categories:
        category_id = category[0]
        cover_path = category[1]
        # images 테이블에 삽입 (버켓은 'matchlog'로 지정)
        res = connection.execute(
            sa.text("""
                INSERT INTO images (bucket, path)
                VALUES (:bucket, :path)
                RETURNING id
            """),
            {'bucket': 'matchlog', 'path': cover_path}
        )
        image_id = res.fetchone()[0]  # type: ignore
        # question_card_categories 테이블 FK 업데이트
        connection.execute(
            sa.text("""
                UPDATE question_card_categories
                SET cover_image_id = :image_id
                WHERE id = :category_id
            """),
            {'image_id': image_id, 'category_id': category_id}
        )
    op.drop_column('question_card_categories', 'coverImagePath')

    # --- question_cards 테이블 변경 작업 ---
    op.add_column('question_cards', sa.Column('image_id', sa.Integer(), nullable=True))
    op.create_foreign_key("fk_question_cards_image_id", 'question_cards', 'images', ['image_id'], ['id'])

    # --- question_cards 테이블 데이터 이전 ---
    cards = connection.execute(
        sa.text('SELECT id, "imagePath" FROM question_cards WHERE "imagePath" IS NOT NULL')
    ).fetchall()
    for card in cards:
        card_id = card[0]
        image_path = card[1]
        # images 테이블에 삽입 (버켓은 'matchlog'로 지정)
        res = connection.execute(
            sa.text("""
                INSERT INTO images (bucket, path)
                VALUES (:bucket, :path)
                RETURNING id
            """),
            {'bucket': 'matchlog', 'path': image_path}
        )
        image_id = res.fetchone()[0]  # type: ignore
        # question_cards 테이블 FK 업데이트
        connection.execute(
            sa.text("""
                UPDATE question_cards
                SET image_id = :image_id
                WHERE id = :card_id
            """),
            {'image_id': image_id, 'card_id': card_id}
        )
    op.drop_column('question_cards', 'imagePath')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('question_cards', sa.Column('imagePath', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint("fk_question_cards_image_id", 'question_cards', type_='foreignkey')
    op.drop_column('question_cards', 'image_id')

    op.add_column('question_card_categories', sa.Column('coverImagePath', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint("fk_question_card_categories_cover_image_id", 'question_card_categories', type_='foreignkey')
    op.drop_column('question_card_categories', 'cover_image_id')

    op.add_column('brands', sa.Column('thumbnailImagePath', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint("fk_brands_thumbnail_image_id", 'brands', type_='foreignkey')
    op.drop_column('brands', 'thumbnail_image_id')

    op.drop_index(op.f('ix_images_id'), table_name='images')
    op.drop_table('images')
    # ### end Alembic commands ###
